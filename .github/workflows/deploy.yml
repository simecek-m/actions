name: Build and Deploy to Cloud Run
on: push
env:
  PROJECT_ID: leafs-365818
  GAR_LOCATION: europe-west1
  REPOSITORY: leafs
  SERVICE: leafs-server
  REGION: europe-west1
jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}" # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}" # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v1"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      # NOTE: Alternative option - authentication via credentials json
      # - name: Docker Auth
      # id: docker-auth
      # uses: 'docker/login-action@v1'
      # with:
      #   registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
      #   username: _json_key
      #   password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
      # END - Docker auth and build
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          # NOTE: You can also set env variables here:
          #  env_vars: |
          #  NODE_ENV=production
          #  TOKEN_EXPIRE=6400
          env_vars: |
            MODE = ${{secrets.MODE}}
            LOG_LEVEL = ${{secrets.LOG_LEVEL}}
            LOG_FOLDER = ${{secrets.LOG_FOLDER}}
            PORT = ${{secrets.PORT}}
            MONGO_CONNECTION_STRING_FORMAT = ${{secrets.MONGO_CONNECTION_STRING_FORMAT}}
            MONGO_SERVER_HOST = ${{secrets.MONGO_SERVER_HOST}}
            MONGO_DATABASE_NAME = ${{secrets.MONGO_DATABASE_NAME}}
            MONGO_SERVER_PORT = ${{secrets.MONGO_SERVER_PORT}}
            MONGO_AUTHENTICATION = ${{secrets.MONGO_AUTHENTICATION}}
            MONGO_USER = ${{secrets.MONGO_USER}}
            MONGO_PASSWORD = ${{secrets.MONGO_PASSWORD}}
            AUTH_AUDIENCE = ${{secrets.AUTH_AUDIENCE}}
            AUTH_ISSUER_BASE_URL = ${{secrets.AUTH_ISSUER_BASE_URL}}
            TREBLLE_API_KEY = ${{secrets.TREBLLE_API_KEY}}
            TREBLLE_PROJECT_ID = ${{secrets.TREBLLE_PROJECT_ID}}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
